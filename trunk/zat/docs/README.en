The ZX Spectrum Community                                  Justin Forest
Public Documentation                                          March 2005

                          Zat Assembler Toolkit

Table of Contents

   1. Introduction.
   2. User information.
      1. Syntax.
      2. Output.
      3. Memory management.
      4. Meta code.
         1. Byte.
         2. ByteList.
         3. BOffset.
         4. Define.
         5. Include.
         6. Insert.
         7. Origin.
         8. Word.
         9. WordList.
      5. Configuration.
   3. Developer information.
      1. Translation.
   A. Distribution.
   B. Contact information.


1. Introduction.

   Zat is a table driven assembly language translator.  The table of
   possible mnemonics, corresponding machine code and translation
   directive mapping is read from an external text file, easy to read
   and edit (this makes it easy to quickly fix bugs or adapt the
   translator to your favourite asm dialect).

   The current design deals with 16 bit machine words only.  It is
   expected to work with all 16-bit architectures.


2. User information.

2.1. Syntax.

   Each line of the source file can contain one or many of the
   following optional components: a label, a mnemonic or
   a comment.  Mnemonics and corresponding parameters can not
   be placed on different lines (i.e., one line per instruction).

   Source files must follow the following rules:

   o Only one label can be specified within a single line of the
     source code.  If more labels must be applied to a single
     instruction, they can be stacked in lines above the one with
     the required instruction.

   o Mnemonics and translation instructions must be followed by
     a space and all necessary parameters.  The list of parameters
     consists of fixed values, such as register names, or variable
     values, such as: constants, symbols, offset values.

     Because zat does not know anything about a particular instriction
     set, it also does not support instruction unrolling.  Never will
     "PUSH R1, R2" be treated as "PUSH R1" followed by "PUSH R2" by
     zat itself.  The only way to add support for such constructions
     is to add all possible combinations of registers to the
     translation table; keep in mind that this approach significantly
     increases the size of the translation table (which, in turn,
     degrades performance), obfuscates the source code and gives little
     in return.  Stay conservative.

   o Parameters that expect a variable value can be defined by
     expressions consisting of a mixture of numeric constants and
     references to labels, each pair separated by one of the following
     arithmetic signs: +, -, / or *.  Brackets can be used to group
     subexpressions.  Operators are executed from left to right,
     all are equal (i.e., multiplication does not take precedence
     over addition).

     Numeric values can be specified in different ways.  Hexadecimal
     values can be prefixed with "0x", "$" or "#", or suffixed with
     "h".  Binary values can be prefixed with "%" or suffixed with
     "b".  Decimal values have neither a prefix nor a suffix.  Values
     in other bases are not supported.

     Referenced labels may well be undefined by the time of reference.
     The actual value is calculated after all the source code is
     processed and all symbols are collected.  This applies to the
     special symbol "$" (corresponds to the translation address of the
     current line), too.

     Byte sequences can be specified either as an expression that
     evaluates to a one byte value (-128..255), or as a string in
     either single or double quotation marks.

   o Comments begin with a semicolon and span the rest of the line.

   o Mnemonics and symbols are case insensitive.  String values are
     case sensitive and file names can also be case sensitive,
     depending on the file system being used.


2.2. Output.

   Zat only supports one form of output: object files.  One object
   file is created for all translation units processed with one
   command (zat invokation).

   The output file, which is by default named "zat.obj", contains
   information about all memory segments, including names, and binary
   blocks, including base address and size.  The content of an object
   file can be listed with the `zodump' utility or converted to
   another output format using a different utility, see below.


2.3. Memory management.

   Zat knows nothing about the memory model of the target architecture.
   It is rather a task of the particular object file conversion utility
   to maintain such integrity.  Zat will neither check the size of any
   particular binary block, nor the address (which may well be out of
   the 16 bit value range).


2.4. Meta code.

   There is a number of special values that can be used in the
   machine code section of the translation table.  These codes
   may be freely mixed with the real machine code.

   Each meta code starts with a dot and corresponds to one
   wildcard (the `@' character) in the instruction template.

   The following chapters describe such codes.


2.4.1. Byte.

   Syntax: .byte

   This meta code converts the expression spanned by the
   corresponding wildcard to a numeric value and emits one
   byte.  If the value requires more than one byte, an
   error is generated.


2.4.2. ByteList.

   Syntax: .bytelist

   Processes the parameter as a sequence of comma-separated
   expressions, each of which emits a byte sized value.  Much
   like a sequence of .byte codes.


2.4.3. BOffset.

   Syntax: .boffset

   Calculates the difference between the value of the expression
   and the current instruction's base address, then emits it as
   a byte sized value.


2.4.4. Define.

   Syntax: .define

   Applies the label on this line to the value of the expression.
   If there was no label in the beginning of the current line, an
   error is generated.
   
   When the label is applied, it is removed from the parser's
   context, thus it's not possible to apply one label to multiple
   expressions.


2.4.5. Include.

   Syntax: .include

   Includes the specified source file, restarting translation
   from its first line.  When the file is over, translation
   restarts from where it left off.

   There is no depth limit for included files, neither is ther
   a control for duplicate includes.


2.4.6. Insert.

   Syntax: .insert

   Emits the content of the specified file, byte by byte.


2.4.7. Origin.

   Syntax: .origin

   Starts a new block.  The value of the expression is used as
   the base address.  The value may be unknown at the time of
   this instruction being translated.


2.4.8. Word.

   Syntax: .word

   Converts the expression spanned by the corresponding wildcard
   to a numeric value and emits two bytes (little endian).  If the
   value requires more than two bytes, an error is generated.


2.4.9. WordList.

   Syntax: .wordlist

   Processes the parameter as a sequence of comma-separated
   expressions, each of which emits a word sized value.  Much
   like a sequence of .word codes.


2.4.10. Zap.

   Syntax: .zap

   Ignores the expression spanned by the corresponding wildcard.


2.5. Configuration.

   Default behaviour of every zat tool can be overruled by the
   so-called user and directory profiles.  These are text files
   named ".zat.rc" located in the user's home directory and the
   directory from which the tool is launched, respectively.

   Every line of such file begins with the name of the tool,
   as a single word, followed by additional command line
   arguments.  When the tool is launched, it first reads and
   applies the user profile, then the directory profile, then
   the command line itself.

   For example, if the assembler tool is named "zas" and you want
   to add a directory to the generic source code search path, you
   add the following line to the ~/.zat.rc file, strip the quotes:

   "zas -I /usr/local/share/zas/include"

   There can be multiple lines with the same prefix.  There can
   also be lines related to a different tool; they will be ignored.


3. Developer documentation.

   This chapter is for developers interested in modifying zat.  It
   gives a brief idea of how the translator works internally.


3.1. Translation.

   The translation is performed in three passes.

   First, the source code is validated and position independent
   machine code is generated.  The code is stored in memory blocks
   of arbitrary size, identified by the output file name and start
   address.  Referenced symbols, along with the symbols themselves
   are stored for later resolution.  Syntax errors abort the process.

   Next, references to undefined labels are fixed according to the
   symbol table.  This operation is performed recursively, until
   there are no such references or until nothing could be fixed.
   Undefined references produce errors, uless a command line switch
   is used to redefine this behaviour.

   Finally, memory blocks are written to files specified during
   translation.  Overlapping memory blocks produce warnings.


A. Distribution.

   Zat is a free software distributed under the terms of the
   GNU GPL license.


B. Contact information.

   Authors of the toolkit can be found at irc.zx.ru, channel #z80.rus.


; $Id$
; vim:ts=3:ss=3:sw=3:et:nocindent
